generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Case {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  status      CaseStatus @default(OPEN)

  users          CaseUser[]
  taggedEvidence TaggedEvidence[]
  mediaEvidence  MediaEvidence[]
  AuditLog       AuditLog[]
}

enum CaseStatus {
  OPEN
  CLOSED
  ARCHIVED
}

model CaseUser {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  caseId      String
  userId      String
  permissions String @default("0") @db.VarBit

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([caseId, userId])
}

model MediaEvidence {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  madeOn            DateTime @default(now())
  originCoordinates String

  userId String
  caseId String

  case      Case       @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  auditLog  AuditLog[]
}

model TaggedEvidence {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  madeOn                    DateTime @default(now())
  containerType             Int
  originCoordinates         String
  originLocationDescription String

  itemType    String
  description String?

  userId String
  caseId String

  case      Case       @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  auditLog  AuditLog[]
}

model User {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  password String

  firstName String
  lastName  String
  rank      Int    @default(0)

  cases          CaseUser[]
  AuditLog       AuditLog[]
  MediaEvidence  MediaEvidence[]
  taggedEvidence TaggedEvidence[]
}

model AuditLog {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId           String
  caseId           String?
  mediaEvidenceId  String?
  taggedEvidenceId String?

  action    Action
  ip        String
  userAgent String
  location  String

  oldData String?
  newData String?

  user           User            @relation(fields: [userId], references: [id])
  case           Case?           @relation(fields: [caseId], references: [id])
  MediaEvidence  MediaEvidence?  @relation(fields: [mediaEvidenceId], references: [id])
  TaggedEvidence TaggedEvidence? @relation(fields: [taggedEvidenceId], references: [id])
}

enum Action {
  CREATE
  UPDATE
  DELETE
  TRANSFER
}
